print(length(vec_1))
print(length(vec_1))
#
print(vec_1)
print(vec_1)
print(list_1)
list_1 <- list("a", 1L, 1.5, TRUE)
print(list_1)
str(list("a", 1L, 1.5, TRUE))
str(list("a", 1L, 1.5, TRUE))
print(list_1)
print(vec_1)
print(vec_1)
names(vec_1) <- c("a","b","c")
print(vec_1)
print(typeof(c(1L, 5L)))
print(typeof(vec_1))
print(typeof(c(1L, 5L)))
#Listas
list_1 <- list("a", 1L, 1.5, TRUE)
print(list_1)
str(list("a", 1L, 1.5, TRUE))
?str()
str(list_1)
str(list_1, max.level)
str(list_1, max.level = 0)
str(list_1, max.level = 1)
str(list_1, max.level = 2)
str(list_1, vec.len >=0)
str(list_1, vec.len >=0)
str(list_1, vec.len)
str(list_1, give.length = TRUE)
str(list_1, give.length = FALSE)
str(list_1, give.length = FALSE)
str(list_l)
'Chicago'
'Los Angeles'
x <- list('Chicago' = 1, 'New York' = 2, 'Los Angeles' = 3)
print(x)
print(x[2])
print(x[3])
print(x[2])
install.packages("tidyverse")
library(tidyverse)
today()
now(tzone = )
now()
?now()
now()
now(tzone = "UTC")
now(tzone = "GMT")
now(tzone = "GMT")
now("GMT")
now("UTC")
today()
now()
#O mesmo vale para qualquer ordem; por exemplo, mês, dia e ano. R ainda retorna a data no formato aaaa-mm-dd.
mdy("January 20th, 2021")
#Essas funções também processam números sem aspas e os converte no formato aaaa-mm-dd.
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
mdy_hm("01/20/2021 08:01")
now()
as_date(now())
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
print(data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5)))
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
dir.create("teste")
file.create("teste")
file.create("teste_arquivo")
file.create("teste_arquivo.txt")
dir.create("teste")
dir.create("teste")
source("~/.active-rstudio-document")
quit()
dir.create("~/Git/r-coursera/teste")
file.create("~/Git/r-coursera/teste/teste_arquivo.txt")
#Criação de arquivo
file.create("~/Git/r-coursera/teste/teste_arquivo.txt")
dir.create("~/Git/r-coursera/teste-novo")
#Copiar arquivo
file.copy("~/Git/r-coursera/teste/teste_arquivo.txt", "~/Git/r-coursera/teste-novo/")
#Excluir arquivos
unlink("~/Git/r-coursera/teste/", recursive = TRUE)
unlink("~/Git/r-coursera/teste-novo/", recursive = TRUE)
matrix(c(3:8), nrow = 2)
matrix(c(3:8), nrow = 2)
#Você pode especificar o número de colunas (ncol = ) ao invés de linhas (nrow = ).
matrix(c(3:8), ncol = 2)
browseVignettes("tidyverse")
browseVignettes("ggplot2")
View(ToothGrowth)
install.packages("dplyr")
View(filtered_tg)
View(filtered_tg)
data("ToothGrowth")
View(ToothGrowth)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(ToothGrowth)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
data("ToothGrowth")
View(ToothGrowth)
install.packages("dplyr")
library(dplyr)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
data("ToothGrowth")
View(ToothGrowth)
install.packages("dplyr")
library(dplyr)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
install.packages("dplyr")
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
filtered_tg <- filter(ToothGrowth, dose==0.5)
data("ToothGrowth")
View(ToothGrowth)
#install.packages("dplyr")
library(dplyr)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
data("ToothGrowth")
#View(ToothGrowth)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
data("ToothGrowth")
#View(ToothGrowth)
filtered_tg <- filter(ToothGrowth, dose==0.5)
View(filtered_tg)
#Visualização dos dados filtrados através da variável "filtered_tg"
View(filtered_tg)
source("~/Git/r-coursera/Toot_growth_exploration.R")
?ggplot2
ggplot2::aes(x="dose",y="len")
ggplot2::aes(x="dose",y="len")
ggplot2(ToothGrowth, x="dose",y="len")
library(ggplot2)
ggplot2(ToothGrowth, x="dose",y="len")
ggplot2(ToothGrowth, x="dose",y="len")
#Instalação do pacote (caso não esteja instalado)
#install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot2(ToothGrowth, x="dose",y="len")
#Instalação do pacote (caso não esteja instalado)
#install.packages("dplyr")
#install.packages("ggplot2")
#Importação do pacote
library(dplyr)
library(ggplot2)
#Importação dos dados
data("ToothGrowth")
#Visualizar os dados completos
#View(ToothGrowth)
#Aplicar função filter (do pacote "dplyr"), mostrando apenas os dados em que a
#coluna "dose" seja igual a 0.5 e armazena na variável "filtered_tg"
filtered_tg <- filter(ToothGrowth, dose==0.5)
#Visualização dos dados filtrados através da variável "filtered_tg"
View(filtered_tg)
ggplot2(ToothGrowth, x="dose",y="len")
ggplot(ToothGrowth, x="dose",y="len")
ggplot(ToothGrowth, x="dose",y="len") + geom_col()
ggplot(ToothGrowth, aes=(x="dose",y="len")) + geom_col()
ggplot(ToothGrowth, aes=(x=dose,y=len)) + geom_col()
ggplot(ToothGrowth, aes=(x=dose y=len)) + geom_col()
ggplot(ToothGrowth, aes=(x=dose, y=len)) + geom_col()
ggplot(ToothGrowth, aes=(x = dose, y = len)) + geom_col()
ggplot(ToothGrowth, aes(x = "len", y = "dose"))
ggplot(ToothGrowth, aes(x = "len", y = "dose")) + geom_col()
ggplot(ToothGrowth, aes(x = "len", y = "dose")) + geom_density()
ggplot(ToothGrowth, aes(x ="len", y)) + geom_line()
arrange(filtered_tg, len)
filtered_tootgrouwth_with_pipe <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
filtered_tootgrouwth_with_pipe <- ToothGrowth %>%
filter(dose==0.5) %>%
arrange(len)
View(filtered_tootgrouwth_with_pipe)
#Importação do pacote
library(dplyr)
#Importação dos dados
data("ToothGrowth")
#Visualizar os dados completos
View(ToothGrowth)
filtered_tootgrouwth_with_pipe <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp)
View(filtered_tootgrouwth_with_pipe)
filtered_tootgrouwth_with_pipe <- ToothGrowth %>%
filter(dose==0.5) %>%
group_by(supp) %>%
summarise(mean_lean = mean (len, na.rm = T),.group="drop")
View(filtered_tootgrouwth_with_pipe)
View(ToothGrowth)
View(filtered_tootgrouwth_with_pipe)
View(filtered_tg)
View(filtered_tootgrouwth_with_pipe)
install.packages("tidyverse")
#install.packages("tidyverse")
library(ggplot2)
#install.packages("tidyverse")
library(ggplot2)
data("diamonds")
View(diamonds)
head(diamonds)
View(head(diamonds))
View(str(diamonds))
View(colnames(diamonds))
mutate(diamonds, carat_2=carat*100)
library(dplyr)
mutate(diamonds, carat_2=carat*100)
View(head(diamonds))
mutate(diamonds, carat_2=carat*100)
mutate(diamonds, carat_2=carat*100)
View(head(diamonds))
View(head(mutate(diamonds, carat_2=carat*100)))
install.packages("tidyverse")
library(tidyverse)
names <- c("João", "Maria", "José", "Ana")
age <- c(10, 20, 30, 40)
people <- data.frame(names, age)
head(people)
str(people)
glimpse(people)
colnames(people)
mutate(people, age_in_20 = age + 20)
fruit_name <- c("Apple", "Orange", "Watermelon", "Tomato")
fruit_rank <- c(3, 2, 1, 4)
data.frame(fruit_name, fruit_rank)
fruits <- data.frame(fruit_name, fruit_rank)
fruits <- data.frame(fruit_name, fruit_rank)
fruits <- data.frame(fruit_name, fruit_rank)
fruits <- data.frame(fruit_name, fruit_rank)
head(fruits)
library(tidyverse)
data("diamonds")
View(diamonds)
as_tibble(diamonds)
data()
data("sleep")
View(sleep)
data(mtcars)
View(mtcars)
View(cars)
library(tibbles)
library(tibble)
as_tibble(mtcars)
View(mtcars)
data(mtcars)
View(file)
View(csv_file)
csv_file <- read_csv("~/Git/r-coursera/working_with_dataframes/Hands-On-Activity--Create-your-own-data-frame2_POR.csv")
View(csv_file)
csv_file <- read_csv("~/Git/r-coursera/working_with_dataframes/Hands-On-Activity--Create-your-own-data-frame2_POR.csv")
library(readr)
data(mtcars)
csv_file <- readr_example(mtcars.csv) %>%
read_csv()
csv_file <- read_csv(readr_example("mtcars.csv"))
View(csv_file)
library(readxl)
excel_sheets(readxl_example(“type-me.xlsx”))
sheet_file <- read_xls(readxl_example(“type-me.xlsx”))
sheet_file <- read_xls(readxl_example("type-me.xlsx"))
sheet_file <- read_xls(readxl_example("type-me.xlsx"))
sheet_file <- read_xl(readxl_example("type-me.xlsx"))
sheet_file <- read_excel(readxl_example("type-me.xlsx"))
View(sheet_file)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
bookings_df <- read_csv("hotel_bookings.csv")
View(bookings_df)
head(bookings_df)
str(bookings_df)
colnames(bookings_df)
new_df <- select(bookings_df, `adr`, adults)
View(new_df)
mutate(new_df, total = `adr` / adults)
test_jobs <- read_csv(jobs.csv)
test_jobs <- read_csv("jobs.csv")
View(test_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3)
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
arrange(rating)
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(!is.null(min_salary )) %>%
filter(!is.null(max_salary )) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(is.null(min_salary )) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(is.null(min_salary)) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(min_salary != "") %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(min_salary != "" & max_salary = "") %>%
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(min_salary != "" && max_salary = "") %>%
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(min_salary = "" && max_salary = "") %>%
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(min_salary = "") %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
# filter(min_salary = "") %>%
arrange(desc(rating))
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(is.na(min_salary)) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(!is.na(min_salary) & is.na(max_salary)) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(!is.na(min_salary) & !is.na(max_salary)) %>%
arrange(desc(rating))
View(filtered_jobs)
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(!is.na(min_salary) ) %>%
arrange(desc(rating))
test_jobs <- read_csv("jobs.csv")
filtered_jobs <- test_jobs %>%
filter(rating >= 3) %>%
filter(job_type != "FULL_TIME") %>%
filter(!is.na(min_salary) & !is.na(max_salary)) %>%
arrange(desc(rating))
install.packages("here")
install.packages("skimr")
install.packages("janitor")
library(skimr)
library(here)
library(janitor)
library(dplyr)
#install.packages("here")
#install.packages("skimr")
#install.packages("janitor")
install.packages("palmerpenguins")
#install.packages("here")
#install.packages("skimr")
#install.packages("janitor")
#install.packages("palmerpenguins")
library(palmerpenguins)
skim_without_charts(penguins)
glimpse(penguins)
head(penguins)
penguins %>%
select(species)
penguins %>%
select(-species)
penguins %>%
rename(island_new=island)
penguins %>%
rename_with(penguins=toupper())
penguins %>%
rename_with(penguins, toupper())
penguins %>%
rename_with(penguins, toupper)
penguins %>%
rename_with(penguins, toupper)
rename_with(penguins, toupper)
#Renomear as colunas (tudo lowercase)
rename_with(penguins, tolower())
#Renomear as colunas (tudo lowercase)
rename_with(penguins, tolower)
clean_names(penguins)
?clean_names()
teste <- c(1:10)
install.packages("palmerpenguins")
#install.packages("palmerpenguins")
library(palmerpenguins)
data("penguins")
force(penguins)
library(tidyverse)
penguins %>% arrange(bill_length_mm)
penguins %>% arrange(bill_length_mm)
penguins2 <- penguins %>% arrange(-bill_length_mm)
View(penguins2)
View(penguins2)
View(penguins2)
View(penguins2)
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm))
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm)) %>%
summarise(max_bill_length_mm = max(bill_length_mm)) %>%
summarise(min_bill_length_mm = min(bill_length_mm))
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins %>%
group_by(island) %>%
drop_na() %>%
#summarise(mean_bill_length_mm = mean(bill_length_mm)) %>%
summarise(max_bill_length_mm = max(bill_length_mm))
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm)) %>%
summarise(max_bill_length_mm = max(bill_length_mm))
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm)
max_bill_length_mm = max(bill_length_mm)
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm),
max_bill_length_mm = max(bill_length_mm),
min_bill_length_mm = min(bill_length_mm))
View(penguins_new_data)
#Agrupa pela ilha, descarta os NA e faz a média do tamanho dos bicos de cada agrupamento
penguins_new_data <- penguins %>%
group_by(island) %>%
drop_na() %>%
summarise(mean_bill_length_mm = mean(bill_length_mm),
max_bill_length_mm = max(bill_length_mm),
min_bill_length_mm = min(bill_length_mm))
View(penguins_new_data)
penguins %>%
group_by(species, island) %>%
drop_na() %>%
summarise(max_bl = max(bill_length_mm),
mean_bl())
penguins %>%
group_by(species, island) %>%
drop_na() %>%
summarise(max_bl = max(bill_length_mm),
mean_bl = mean(bill_length_mm))
penguins %>% filter(species=="Adelie")
penguins %>% filter(species == "Adelie")
install.packages("tidyverse")
install.packages("skimr")
